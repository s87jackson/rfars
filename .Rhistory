inner_join(filter_frame, by = c("year", "casenum"))
test_gescrss$multi_per <- gescrss_full$multi_per %>%
inner_join(filter_frame, by = c("year", "casenum"))
# Filter events
test_gescrss$events <- gescrss_full$events %>%
inner_join(filter_frame, by = c("year", "casenum"))
# Keep full codebook
test_gescrss$codebook <- gescrss_full$codebook
# Save fixture
saveRDS(test_gescrss, file.path(fixture_dir, "test_gescrss.rds"))
cat("GESCRSS fixture saved:", nrow(test_gescrss$flat), "rows in flat file\n")
cat("  Multi_acc:", nrow(test_gescrss$multi_acc), "rows\n")
cat("  Multi_veh:", nrow(test_gescrss$multi_veh), "rows\n")
cat("  Multi_per:", nrow(test_gescrss$multi_per), "rows\n")
cat("  Events:", nrow(test_gescrss$events), "rows\n")
} else {
cat("Failed to download GESCRSS data\n")
}
test_gescrss
# Save fixture
saveRDS(test_gescrss, file.path(fixture_dir, "test_gescrss.rds"))
file.path(fixture_dir, "test_gescrss.rds")
# Save fixture
saveRDS(test_gescrss, file.path(fixture_dir, "test_gescrss.rds"))
getwd()
saveRDS(test_gescrss, file.path(fixture_dir, "test_gescrss.rds"))
file.path(fixture_dir, "test_gescrss.rds")
file.path(getwd(), fixture_dir, "test_gescrss.rds")
fixture_dir
# Save fixture
saveRDS(test_gescrss, file.path("tests/testthat/", fixture_dir, "test_gescrss.rds"))
# Save fixture
saveRDS(test_fars, file.path("tests/testthat/", fixture_dir, "test_fars.rds"))
# Check if fixtures exist
fars_fixture <- file.path(fixture_dir, "test_fars.rds")
gescrss_fixture <- file.path(fixture_dir, "test_gescrss.rds")
if (!file.exists(fars_fixture) || !file.exists(gescrss_fixture)) {
stop(
"Test fixtures not found. Please run tests/testthat/create-fixtures.R first.\n",
"This script downloads real data and creates small test fixtures.\n",
"Run: source('tests/testthat/create-fixtures.R')"
)
}
# Load fixtures for all tests
test_fars <- readRDS(fars_fixture)
test_gescrss <- readRDS(gescrss_fixture)
test_fars
test_gescrss
# Also keep the old names for backward compatibility with tests already written
mock_fars <- test_fars
mock_gescrss <- test_gescrss
# Store original options
original_options <- options()
devtools::test()
counts(mock_fars, what = "fatalities")
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
dplyr::pull(id)
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
dplyr::pull(id) %>%
unique() %>%
length()
counts(mock_fars, what = "fatalities")
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
n_distinct(year, st_case)
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)")
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, st_case)
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, st_case) %>%
dplyr::pull(id)
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, st_case) %>%
dplyr::pull("id") %>%
unique() %>%
length()
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id) %>%
dplyr::pull("id") %>%
unique() %>%
length()
df <- mock_fars
what = "fatalities"
interval=c("year", "month")[1]
where=list(states="all",
region = c("all", "ne", "mw", "s", "w")[1],
urb=c("all", "rural", "urban")[1])
who=c("all", "drivers", "passengers", "bicyclists", "pedestrians")[1]
involved = c("any", "each", "alcohol", "bicyclist", "distracted driver", "drugs", "hit and run", "large trucks", "motorcycle", "older driver", "pedalcyclist", "pedbike", "pedestrian", "police pursuit", "roadway departure", "rollover", "speeding", "young driver")
filterOnly=FALSE
if(!(any(class(df) %in% c("FARS", "GESCRSS")))){
stop("Input data must be of type FARS or GESCRSS. Use the results of get_fars() or get_gescrss().")
}
flat <- df$flat
# Resolve unspecified parameters ----
if(!("states" %in% names(where))) where[["states"]] <- "all"
if(!("region" %in% names(where))) where[["region"]] <- "all"
if(!("urb"    %in% names(where))) where[["urb"]] <- "all"
# What ----
# (also determines how counts are done)
if(what == "fatalities") flat <- flat %>% filter(.data$inj_sev == "Fatal Injury (K)")
if(what == "injuries")   flat <- flat %>% filter(.data$inj_sev %in% c("Incapacitating Injury (A)",
"Suspected Serious Injury (A)",
"Suspected Serious Injury(A)",
"Non-incapacitating Evident Injury (B)",
"Suspected Minor Injury (B)",
"Suspected Minor Injury(B)",
"Possible Injury (C)",
"Injured, Severity Unknown"
))
n_distinct(flat$id)
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id) %>%
dplyr::pull("id") %>%
unique() %>%
length()
flat <- df$flat
# Resolve unspecified parameters ----
if(!("states" %in% names(where))) where[["states"]] <- "all"
if(!("region" %in% names(where))) where[["region"]] <- "all"
if(!("urb"    %in% names(where))) where[["urb"]] <- "all"
# What ----
# (also determines how counts are done)
if(what == "fatalities") flat <- flat %>% filter(.data$inj_sev == "Fatal Injury (K)")
if(what == "injuries")   flat <- flat %>% filter(.data$inj_sev %in% c("Incapacitating Injury (A)",
"Suspected Serious Injury (A)",
"Suspected Serious Injury(A)",
"Non-incapacitating Evident Injury (B)",
"Suspected Minor Injury (B)",
"Suspected Minor Injury(B)",
"Possible Injury (C)",
"Injured, Severity Unknown"
))
if("month" %in% interval){
flat$date = lubridate::make_date(flat$year, match(flat$month, month.name))
} else{
flat$date = lubridate::make_date(flat$year, 1, 1)
}
interval <- c(interval, "date")
flat <- flat %>% group_by(across(all_of(interval)), .add=FALSE)
n_distinct(flat$id)
if(!("all" %in% where$states)){
mystates <- rfars::geo_relations %>% filter(.data$state_name_abbr %in% where$states |
.data$state_name_full %in% where$states |
.data$fips_state %in% where$states) %>%
pull("state_name_full") %>% unique()
if("FARS" %in% class(df)){
validate_states(where$states)
flat <- flat %>% filter(.data$state %in% mystates)
}
if("GESCRSS" %in% class(df)) stop("Cannot subset GESCRSS by state. Use region instead.")
}
if(!("all" %in% where$region)){
if("GESCRSS" %in% class(df)){
myregions <- filter(rfars::geo_relations, .data$region_abbr %in% where$region) %>% pull("region") %>% unique()
flat <- filter(flat, .data$region %in% myregions)
}
if("FARS" %in% class(df)){
myregionstates <- filter(rfars::geo_relations, .data$region_abbr %in% where$region) %>% pull("state_name_full") %>% unique()
flat <- filter(flat, .data$state %in% myregionstates)
}
}
if(!("all" %in% where$urb)){
if("GESCRSS" %in% class(df)){
myurb <- paste0(where$urb, " area")
flat <- filter(flat, tolower(.data$urbanicity) == myurb)
}
if("FARS" %in% class(df)){
flat <- filter(flat, tolower(.data$rur_urb) == tolower(where$urb))
}
}
n_distinct(flat$id)
if ("any" %in% involved && length(involved) > 1) stop("'involved' cannot contain both 'any' and other values.")
if ("each" %in% involved && length(involved) > 1) stop("'involved' cannot contain both 'each' and other values.")
if ("each" %in% involved && filterOnly == TRUE) stop("To use involved = 'each', set filterOnly = FALSE")
if(length(involved) == 1 && involved == "any") flat$involved <- "any"
n_distinct(flat$id)
if(length(involved)>=1 && !(any(c("any", "each") %in% involved))){
if("distracted driver" %in% involved) flat <- inner_join(flat, distracted_driver(df), by = c("year", "id"))
if("police pursuit" %in% involved)    flat <- inner_join(flat, police_pursuit(df), by = c("year", "id"))
if("alcohol" %in% involved)           flat <- inner_join(flat, alcohol(df), by = c("year", "id"))
if("motorcycle" %in% involved)        flat <- inner_join(flat, motorcycle(df), by = c("year", "id"))
if("pedalcyclist" %in% involved)      flat <- inner_join(flat, pedalcyclist(df), by = c("year", "id"))
if("pedestrian" %in% involved)        flat <- inner_join(flat, pedestrian(df), by = c("year", "id"))
if("bicyclist" %in% involved)         flat <- inner_join(flat, bicyclist(df), by = c("year", "id"))
if("pedbike" %in% involved)           flat <- inner_join(flat, pedbike(df), by = c("year", "id"))
if("young driver" %in% involved)      flat <- inner_join(flat, driver_age(df, 15, 20), by = c("year", "id"))
if("older driver" %in% involved)      flat <- inner_join(flat, driver_age(df, 65, 100), by = c("year", "id"))
if("speeding" %in% involved)          flat <- inner_join(flat, speeding(df), by = c("year", "id"))
if("drugs" %in% involved)             flat <- inner_join(flat, drugs(df), by = c("year", "id"))
if("large trucks" %in% involved)      flat <- inner_join(flat, large_trucks(df), by = c("year", "id"))
if("hit and run" %in% involved)       flat <- inner_join(flat, hit_and_run(df), by = c("year", "id"))
if("roadway departure" %in% involved) flat <- inner_join(flat, road_depart(df), by = c("year", "id"))
if("rollover" %in% involved)          flat <- inner_join(flat, rollover(df), by = c("year", "id"))
if(length(involved)==1){
flat$involved <- involved
} else{
flat$involved <- paste(involved, collapse = " AND ")
}
}
n_distinct(flat$id)
if(length(involved) == 1 && involved == "each"){
# Master list of all possible types
all_involved <- c(
"alcohol", "bicyclist", "distracted driver", "drugs", "hit and run", "large trucks",
"motorcycle", "older driver", "pedalcyclist", "pedbike", "pedestrian",
"police pursuit", "roadway departure", "rollover", "speeding", "young driver"
)
# Named list of data-generating functions
involved_functions <- list(
"alcohol"             = alcohol,
"bicyclist"           = bicyclist,
"distracted driver"   = distracted_driver,
"drugs"               = drugs,
"hit and run"         = hit_and_run,
"large trucks"        = large_trucks,
"motorcycle"          = motorcycle,
"older driver"        = function(df) driver_age(df, 65, 100),
"pedalcyclist"        = pedalcyclist,
"pedbike"             = pedbike,
"pedestrian"          = pedestrian,
"police pursuit"      = police_pursuit,
"roadway departure"   = road_depart,
"rollover"            = rollover,
"speeding"            = speeding,
"young driver"        = function(df) driver_age(df, 15, 20)
)
# Stack results
combined <- map_dfr(
all_involved,
function(type) {
result <- inner_join(flat, involved_functions[[type]](df), by = c("year", "id"))
result$involved <- type
result
}
)
flat <- combined
}
n_distinct(flat$id)
# Who ----
if(!("all" %in% who)){
who_convert <- data.frame(
simple = c("bicyclists", "pedestrians", "drivers", "passengers"),
indata = c("Bicyclist", "Pedestrian",
"Driver of a Motor Vehicle In-Transport",
"Passenger of a Motor Vehicle In-Transport")
)
flat <- filter(flat, .data$per_typ %in% who_convert$indata[who_convert$simple %in% who])
}
n_distinct(flat$id)
interval <- setdiff(interval, "date")
if(filterOnly){
return(flat)
} else{
if("GESCRSS" %in% class(df)){
if(what == "crashes"){
flat <- flat %>%
select(any_of(c("id", interval, "weight", "involved", "date", "involved"))) %>%
distinct() %>%
group_by(across(any_of(c(interval, "involved")))) %>%
summarize(n=sum(.data$weight, na.rm = T), .groups = "drop")
}
if(what %in% c("fatalities", "people", "injuries")) {
flat <- flat %>%
select(any_of(c("id", "veh_no", "per_no", interval, "weight", "involved", "date"))) %>%
distinct() %>%
group_by(across(any_of(c(interval, "involved")))) %>%
summarize(n=sum(.data$weight, na.rm = T), .groups = "drop")
}
}
if("FARS" %in% class(df)){
if(what == "crashes"){
flat <- flat %>%
group_by(across(any_of(c(interval, "involved")))) %>%
summarize(n=n_distinct(.data$id), .groups = "drop")
}
if(what %in% c("fatalities", "people", "injuries")) {
flat <- flat %>%
group_by(across(any_of(c(interval, "involved")))) %>%
summarize(n=n_distinct(.data$id, .data$veh_no, .data$per_no), .groups = "drop")
}
}
}
n_distinct(flat$id)
GESCRSS" %in% class(df)
"GESCRSS" %in% class(df)
flat
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id) %>%
group_by(year) %>%
summarize(n = n_distinct(id))
expect_equal(sum(result$n), sum(manual_count$n))
result <- counts(mock_fars, what = "fatalities")
manual_count <- mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id) %>%
group_by(year) %>%
summarize(n = n_distinct(id))
test_that("fatalities counts only Fatal Injury (K)", {
result <- counts(mock_fars, what = "fatalities")
manual_count <- mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id) %>%
group_by(year) %>%
summarize(n = n_distinct(id))
expect_equal(sum(result$n), sum(manual_count$n))
})
result <- counts(mock_fars, what = "fatalities")
sum(result$n)
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id) %>%
group_by(year) %>%
summarize(n = n_distinct(id))
result
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id, veh_no, per_no) %>%
group_by(year) %>%
summarize(n = n_distinct(id))
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id, veh_no, per_no) %>%
group_by(year)
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id, veh_no, per_no) %>%
group_by(year) %>%
summarize(n = n(id))
mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id, veh_no, per_no) %>%
group_by(year) %>%
summarize(n = n())
test_that("fatalities counts only Fatal Injury (K)", {
result <- counts(mock_fars, what = "fatalities")
manual_count <- mock_fars$flat %>%
dplyr::filter(inj_sev == "Fatal Injury (K)") %>%
distinct(year, id, veh_no, per_no) %>%
group_by(year) %>%
summarize(n = n())
expect_equal(sum(result$n), sum(manual_count$n))
})
suppressMessages({
result <- counts(
mock_fars,
what = "fatalities",
interval = "year",
where = list(states = "Virginia", urb = "rural"),
who = "drivers",
involved = "alcohol"
)
})
result
result <- counts(
mock_fars,
what = "fatalities",
interval = "year",
where = list(states = "Virginia"),
who = "drivers",
involved = "alcohol"
)
result
expect_counts_output(result)
#' Expect a valid counts output
#'
#' @param obj The object to test
#' @param interval Expected interval ("year" or "month")
expect_counts_output <- function(obj, interval = "year") {
# Check it's a data frame
expect_s3_class(obj, "data.frame")
# Check required columns exist
expect_true("n" %in% names(obj))
expect_true(interval %in% names(obj))
# Check metadata columns
expect_true(all(c("what", "states", "region", "urb", "who", "involved") %in% names(obj)))
# Check n is numeric
expect_type(obj$n, "integer")
# Check no NA values in n
expect_false(any(is.na(obj$n)))
}
expect_counts_output(result)
expect_equal(result$what[1], "fatalities")
expect_equal(result$what[1], "fatalities")
result$what[1]
expect_equal(result$what[1], "fatalities")
expect_equal(result$states[1], "Virginia")
expect_equal(result$urb[1], "rural")
expect_equal(result$urb[1], "all")
expect_equal(result$who[1], "drivers")
expect_equal(result$involved[1], "alcohol")
unique(mock_fars$flat$year)
# Test with mock data
multi_year_fars <- mock_fars
years_in_flat <- unique(multi_year_fars$flat$year)
years_in_flat
expect_true(all(c(2022, 2023) %in% years_in_flat))
test_that("multiple year request includes all years", {
# Test with mock data
multi_year_fars <- mock_fars
years_in_flat <- unique(multi_year_fars$flat$year)
expect_true(all(c(2022, 2023) %in% years_in_flat))
})
devtools::test()
object.size(rfars::geo_relations)
str(rfars::geo_relations)
object.size(rfars::geo_relations %>% mutate_all(as.factor()))
object.size(rfars::geo_relations %>% mutate_all(as.factor)
)
contextFind:::contextFind_addin()
library(tidyr)
library(dplyr)
library(readr)
library(tidycensus)
library(tigris)
temp_county <- tigris::counties(year = 2010) %>% as.data.frame() %>% select(-geometry)
temp_states <- tigris::states(year = 2010) %>% as.data.frame() %>% select(-geometry)
for(i in 1:nrow(temp_states)){
temp <- tigris::tracts(year = 2010, state = temp_states$STATEFP10[i])
if(i == 1){
temp_tracts <- temp
} else{
temp_tracts <- bind_rows(temp_tracts, temp)
}
}
temp_tracts <- temp_tracts %>% as.data.frame() %>% select(-geometry)
geo_relations <-
temp_county %>%
select(fips_state = STATEFP10,
fips_county = COUNTYFP10,
county_name_abbr = NAME10,
county_name_full = NAMELSAD10
) %>%
full_join(
temp_states %>%
select(fips_state = STATEFP10,
state_name_abbr = STUSPS10,
state_name_full = NAME10)
) %>%
full_join(
temp_tracts %>%
select(fips_state = STATEFP10,
fips_county = COUNTYFP10,
fips_tract = TRACTCE10)
) %>%
mutate(
region = case_when(
state_name_abbr %in% c("PA", "NJ", "NY", "NH", "VT", "RI", "MA", "ME", "CT") ~ "Northeast (PA, NJ, NY, NH, VT, RI, MA, ME, CT)",
state_name_abbr %in% c("OH", "IN", "IL", "MI", "WI", "MN", "ND", "SD", "NE", "IA", "MO", "KS") ~ "Midwest (OH, IN, IL, MI, WI, MN, ND, SD, NE, IA, MO, KS)",
state_name_abbr %in% c("MD", "DE", "DC", "WV", "VA", "KY", "TN", "NC", "SC", "GA", "FL", "AL", "MS", "LA", "AR", "OK", "TX") ~ "South (MD, DE, DC, WV, VA, KY, TN, NC, SC, GA, FL, AL, MS, LA, AR, OK, TX)",
state_name_abbr %in% c("MT", "ID", "WA", "OR", "CA", "NV", "NM", "AZ", "UT", "CO", "WY", "AK", "HI") ~ "West (MT, ID, WA, OR, CA, NV, NM, AZ, UT, CO, WY, AK, HI)"),
region_abbr = case_when(
region == "Northeast (PA, NJ, NY, NH, VT, RI, MA, ME, CT)" ~ "ne",
region == "Midwest (OH, IN, IL, MI, WI, MN, ND, SD, NE, IA, MO, KS)" ~ "mw",
region == "South (MD, DE, DC, WV, VA, KY, TN, NC, SC, GA, FL, AL, MS, LA, AR, OK, TX)" ~ "s",
region == "West (MT, ID, WA, OR, CA, NV, NM, AZ, UT, CO, WY, AK, HI)" ~ "w")
) %>%
mutate_if(is.character, as.factor)
usethis::use_data(geo_relations, overwrite = TRUE)
gc()
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
# Delete data folders and vignette outputs ----
temp_rtmp    <- dir(path = "C:/Users/SteveJackson/AppData/Local/Temp", pattern = "Rtmp", recursive = TRUE, full.names = TRUE, ignore.case = TRUE, include.dirs = TRUE)
temp_fars    <- dir(path = "C:/Users/SteveJackson/AppData/Local/Temp", pattern = "FARS data", recursive = TRUE, full.names = TRUE, ignore.case = TRUE, include.dirs = TRUE)
temp_gescrss <- dir(path = "C:/Users/SteveJackson/AppData/Local/Temp", pattern = "GESCRSS data", recursive = TRUE, full.names = TRUE, ignore.case = TRUE, include.dirs = TRUE)
proj_fars    <- dir(path = "C:/Users/SteveJackson/OneDrive - Toxcel/rfars", pattern = "FARS data", recursive = TRUE, full.names = TRUE, ignore.case = TRUE, include.dirs = TRUE)
proj_gescrss <- dir(path = "C:/Users/SteveJackson/OneDrive - Toxcel/rfars", pattern = "GESCRSS data", recursive = TRUE, full.names = TRUE, ignore.case = TRUE, include.dirs = TRUE)
all_paths <- c(temp_rtmp, temp_fars, temp_gescrss, proj_fars, proj_gescrss)
# Remove duplicates and delete
if (length(all_paths) > 0) {
all_paths <- unique(all_paths)
message(sprintf("Deleting %d folder(s)...", length(all_paths)))
for (path in all_paths) {
message(sprintf("  Deleting: %s", path))
unlink(path, recursive = TRUE, force = TRUE)
}
message("Data folders deleted successfully")
} else {
message("No data folders found to delete")
}
# Clean environment ----
rm(list = ls())
# Document ----
devtools::document(roclets = c('rd', 'collate', 'namespace', 'vignette'))
# Clean and install ----
message("MANUAL STEP: In RStudio: Build >> Install >> Clean and install")
# Remove old check directory ----
message("Removing old check directory...")
unlink("C:/Users/SteveJackson/OneDrive - Toxcel/rfars.Rcheck", recursive = TRUE)
message("Running devtools::check()...")
devtools::check(args = c('--as-cran'), check_dir = tempdir())
myFARS <- rfars::get_fars(years = 2019:2023, dir = dirname(getwd()), proceed = T, cache = "FARS_2018_2022.rds")
# Build pkgdown site ----
message("Building pkgdown site...")
devtools::submit_cran()
# Build pkgdown site ----
message("Building pkgdown site...")
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
